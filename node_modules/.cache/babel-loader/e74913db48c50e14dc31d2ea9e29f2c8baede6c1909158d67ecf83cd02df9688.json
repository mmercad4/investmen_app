{"ast":null,"code":"var _jsxFileName = \"/home/marco/SoftwareDev/working-projects/investment_app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport Header from \"./components/Header/Header\";\nimport Form from \"./components/Form/Form\";\nimport Investment from \"./components/Investment/Investment\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [investmentData, setInvestmentData] = useState({\n    currentSavings: \"\",\n    yearlySavings: \"\",\n    expectedInterest: \"\",\n    investmentDuration: \"\"\n  });\n  const [yearlyData, setYearlyData] = useState();\n  const saveInvestmentDataHandler = enteredInvestmentData => {\n    setInvestmentData(enteredInvestmentData);\n    calculateHandler(investmentData);\n  };\n  const resetInvestmentDataHandler = enteredInvestmentData => {\n    setInvestmentData({\n      currentSavings: \"\",\n      yearlySavings: \"\",\n      expectedInterest: \"\",\n      investmentDuration: \"\"\n    });\n  };\n  console.log(investmentData);\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyDataTemp = []; // per-year results\n\n    let currentSavings = investmentData.currentSavings; // feel free to change the shape of this input object!\n    const yearlyContribution = investmentData.yearlySavings; // as mentioned: feel free to change the shape...\n    const expectedReturn = investmentData.expectedInterest / 100;\n    const duration = investmentData.investmentDuration;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyDataTemp.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setYearlyData(yearlyDataTemp);\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSaveInvestmentData: saveInvestmentDataHandler,\n      onResetInvestmentData: resetInvestmentDataHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Investment, {\n      investments: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bOHU5kt90V5eGaqjZWLNVpO7f4c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","Form","Investment","useState","jsxDEV","_jsxDEV","App","_s","investmentData","setInvestmentData","currentSavings","yearlySavings","expectedInterest","investmentDuration","yearlyData","setYearlyData","saveInvestmentDataHandler","enteredInvestmentData","calculateHandler","resetInvestmentDataHandler","console","log","userInput","yearlyDataTemp","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onSaveInvestmentData","onResetInvestmentData","investments","_c","$RefreshReg$"],"sources":["/home/marco/SoftwareDev/working-projects/investment_app/src/App.jsx"],"sourcesContent":["import Header from \"./components/Header/Header\";\nimport Form from \"./components/Form/Form\";\nimport Investment from \"./components/Investment/Investment\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [investmentData, setInvestmentData] = useState({\n    currentSavings: \"\",\n    yearlySavings: \"\",\n    expectedInterest: \"\",\n    investmentDuration: \"\",\n  });\n\n  const [yearlyData, setYearlyData] = useState();\n\n  const saveInvestmentDataHandler = (enteredInvestmentData) => {\n    setInvestmentData(enteredInvestmentData);\n    calculateHandler(investmentData);\n  };\n\n  const resetInvestmentDataHandler = (enteredInvestmentData) => {\n    setInvestmentData({\n      currentSavings: \"\",\n      yearlySavings: \"\",\n      expectedInterest: \"\",\n      investmentDuration: \"\",\n    });\n  };\n\n  console.log(investmentData);\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyDataTemp = []; // per-year results\n\n    let currentSavings = investmentData.currentSavings; // feel free to change the shape of this input object!\n    const yearlyContribution = investmentData.yearlySavings; // as mentioned: feel free to change the shape...\n    const expectedReturn = investmentData.expectedInterest / 100;\n    const duration = investmentData.investmentDuration;\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n\n      yearlyDataTemp.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    setYearlyData(yearlyDataTemp);\n\n    // do something with yearlyData ...\n  };\n\n\n  return (\n    <div>\n      <Header />\n      <Form\n        onSaveInvestmentData={saveInvestmentDataHandler}\n        onResetInvestmentData={resetInvestmentDataHandler}\n      />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      <Investment investments={yearlyData} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGN,QAAQ,CAAC;IACnDO,cAAc,EAAE,EAAE;IAClBC,aAAa,EAAE,EAAE;IACjBC,gBAAgB,EAAE,EAAE;IACpBC,kBAAkB,EAAE;EACtB,CAAC,CAAC;EAEF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EAE9C,MAAMa,yBAAyB,GAAIC,qBAAqB,IAAK;IAC3DR,iBAAiB,CAACQ,qBAAqB,CAAC;IACxCC,gBAAgB,CAACV,cAAc,CAAC;EAClC,CAAC;EAED,MAAMW,0BAA0B,GAAIF,qBAAqB,IAAK;IAC5DR,iBAAiB,CAAC;MAChBC,cAAc,EAAE,EAAE;MAClBC,aAAa,EAAE,EAAE;MACjBC,gBAAgB,EAAE,EAAE;MACpBC,kBAAkB,EAAE;IACtB,CAAC,CAAC;EACJ,CAAC;EAEDO,OAAO,CAACC,GAAG,CAACb,cAAc,CAAC;EAE3B,MAAMU,gBAAgB,GAAII,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,cAAc,GAAG,EAAE,CAAC,CAAC;;IAE3B,IAAIb,cAAc,GAAGF,cAAc,CAACE,cAAc,CAAC,CAAC;IACpD,MAAMc,kBAAkB,GAAGhB,cAAc,CAACG,aAAa,CAAC,CAAC;IACzD,MAAMc,cAAc,GAAGjB,cAAc,CAACI,gBAAgB,GAAG,GAAG;IAC5D,MAAMc,QAAQ,GAAGlB,cAAc,CAACK,kBAAkB;;IAElD;IACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGlB,cAAc,GAAGe,cAAc;MACtDf,cAAc,IAAIkB,cAAc,GAAGJ,kBAAkB;MAErDD,cAAc,CAACM,IAAI,CAAC;QAClB;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAErB,cAAc;QAChCc,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAT,aAAa,CAACQ,cAAc,CAAC;;IAE7B;EACF,CAAC;;EAGD,oBACElB,OAAA;IAAA2B,QAAA,gBACE3B,OAAA,CAACL,MAAM;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV/B,OAAA,CAACJ,IAAI;MACHoC,oBAAoB,EAAErB,yBAA0B;MAChDsB,qBAAqB,EAAEnB;IAA2B;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eAKF/B,OAAA,CAACH,UAAU;MAACqC,WAAW,EAAEzB;IAAW;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV;AAAC7B,EAAA,CAtEQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAwEZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}